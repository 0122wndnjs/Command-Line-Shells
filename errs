==80553== Memcheck, a memory error detector
==80553== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==80553== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==80553== Command: ./binary_tests
==80553== 
Running tests
TEST  1 cmd_new_1          : OK
TEST  2 cmd_new_2          : OK
TEST  3 cmd_new_3          : OK
TEST  4 cmd_start_1        : OK
TEST  5 cmd_start_2        : OK
TEST  6 cmd_start_3        : OK
TEST  7 read_all_1         : ==80553== Syscall param read(buf) points to unaddressable byte(s)
==80553==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80553==    by 0x403A84: read_all (cmd.c:97)
==80553==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80553==    by 0x4036B2: main (binary_tests.c:764)
==80553==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80553==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80553==    by 0x403A69: read_all (cmd.c:96)
==80553==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80553==    by 0x4036B2: main (binary_tests.c:764)
==80553== 
Starting loop

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80553==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80553==    by 0x802D631BF: ???
==80553==    by 0x802CA9F2F: ???
==80553==    by 0x8020082EF: ???
==80553==    by 0x403AA5: read_all (cmd.c:98)
==80553==    by 0x8020082EF: ???
==80553==    by 0x1BFF: ???
==80553==    by 0x1118C: ???
==80553==    by 0x804D2BFFF: ???
==80553==    by 0x15FB6: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80553)
==80553==    at 0x403B20: read_all (cmd.c:108)
==80553==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80553==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

==80556== Syscall param read(buf) points to unaddressable byte(s)
==80557== Syscall param read(buf) points to unaddressable byte(s)
==80556==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80561== Syscall param read(buf) points to unaddressable byte(s)
==80556==    by 0x403A84: read_all (cmd.c:97)
==80556==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80556==    by 0x4036B2: main (binary_tests.c:764)
==80556==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80556==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80556==    by 0x403A69: read_all (cmd.c:96)
==80556==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80556==    by 0x4036B2: main (binary_tests.c:764)
==80556== 
==80561==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80561==    by 0x403A84: read_all (cmd.c:97)
==80561==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80561==    by 0x4036B2: main (binary_tests.c:764)
==80561==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80561==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80561==    by 0x403A69: read_all (cmd.c:96)
==80561==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80561==    by 0x4036B2: main (binary_tests.c:764)
==80561== 
==80559== Syscall param read(buf) points to unaddressable byte(s)
==80559==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80559==    by 0x403A84: read_all (cmd.c:97)
==80559==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80559==    by 0x4036B2: main (binary_tests.c:764)
==80559==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80559==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80559==    by 0x403A69: read_all (cmd.c:96)
==80559==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80559==    by 0x4036B2: main (binary_tests.c:764)
==80559== 
Starting loop
Starting loop

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80561==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80561==    by 0x802D63827: ???
==80561==    by 0x802CA9F2F: ???
==80561==    by 0x8020082EF: ???
==80561==    by 0x403AA5: read_all (cmd.c:98)
==80561==    by 0x8020082EF: ???
==80561==    by 0x1BFF: ???
==80561==    by 0x111AF: ???
==80561==    by 0x804D2BFFF: ???
==80561==    by 0x15DE4: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80561)
==80561==    at 0x403B20: read_all (cmd.c:108)
==80561==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80561==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.


valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
==80558== Syscall param read(buf) points to unaddressable byte(s)
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80556==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80556==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80556==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80556==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80556==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x403A84: read_all (cmd.c:97)
==80556==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80556==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80556==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x4036B2: main (binary_tests.c:764)
==80556==    by 0x802D65DD7: ???
==80558==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80556==    by 0x802CA9F2F: ???
==80556==    by 0x8020082EF: ???
==80558==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80558==    by 0x403A69: read_all (cmd.c:96)
==80556==    by 0x403AA5: read_all (cmd.c:98)
==80558==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80556==    by 0x8020082EF: ???
==80558==    by 0x4036B2: main (binary_tests.c:764)
==80556==    by 0x1BFF: ???
==80558== 
==80556==    by 0x111E2: ???
==80556==    by 0x804D2BFFF: ???
==80556==    by 0x15EC4: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80556)
==80556==    at 0x403B20: read_all (cmd.c:108)
==80556==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80556==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

==80560== Syscall param read(buf) points to unaddressable byte(s)
==80557==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80557==    by 0x403A84: read_all (cmd.c:97)
==80557==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80557==    by 0x4036B2: main (binary_tests.c:764)
Starting loop
==80557==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80557==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80557==    by 0x403A69: read_all (cmd.c:96)
==80557==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80557==    by 0x4036B2: main (binary_tests.c:764)
==80557== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80558==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80558==    by 0x802D64F97: ???
==80558==    by 0x802CA9F2F: ???
==80558==    by 0x8020082EF: ???
==80558==    by 0x403AA5: read_all (cmd.c:98)
==80558==    by 0x8020082EF: ???
==80558==    by 0x1BFF: ???
==80558==    by 0x111CF: ???
==80558==    by 0x804D2BFFF: ???
==80558==    by 0x15E52: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80558)
==80558==    at 0x403B20: read_all (cmd.c:108)
==80558==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80558==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Starting loop
==80560==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80560==    by 0x403A84: read_all (cmd.c:97)
==80560==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80560==    by 0x4036B2: main (binary_tests.c:764)
==80560==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80560==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80560==    by 0x403A69: read_all (cmd.c:96)
==80560==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80560==    by 0x4036B2: main (binary_tests.c:764)
==80560== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80559==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80559==    by 0x802D65DD7: ???
==80559==    by 0x802CA9F2F: ???
==80559==    by 0x8020082EF: ???
==80559==    by 0x403AA5: read_all (cmd.c:98)
==80559==    by 0x8020082EF: ???
==80559==    by 0x1BFF: ???
==80559==    by 0x111E3: ???
==80559==    by 0x804D2BFFF: ???
==80559==    by 0x15EC4: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80559)
==80559==    at 0x403B20: read_all (cmd.c:108)
==80559==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80559==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Starting loop

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80560==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80560==    by 0x802D64F97: ???
==80560==    by 0x802CA9F2F: ???
==80560==    by 0x8020082EF: ???
==80560==    by 0x403AA5: read_all (cmd.c:98)
==80560==    by 0x8020082EF: ???
==80560==    by 0x1BFF: ???
==80560==    by 0x111CF: ???
==80560==    by 0x804D2BFFF: ???
==80560==    by 0x15E52: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80560)
==80560==    at 0x403B20: read_all (cmd.c:108)
==80560==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80560==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

==80562== Syscall param read(buf) points to unaddressable byte(s)
Starting loop
==80562==    at 0x4F31230: __read_nocancel (syscall-template.S:84)
==80562==    by 0x403A84: read_all (cmd.c:97)
==80562==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80562==    by 0x4036B2: main (binary_tests.c:764)
==80562==  Address 0x5208064 is 0 bytes after a block of size 4 alloc'd
==80562==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==80562==    by 0x403A69: read_all (cmd.c:96)
==80562==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80562==    by 0x4036B2: main (binary_tests.c:764)
==80562== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80557==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80557==    by 0x802D65DD7: ???
==80557==    by 0x802CA9F2F: ???
==80557==    by 0x8020082EF: ???
==80557==    by 0x403AA5: read_all (cmd.c:98)
==80557==    by 0x8020082EF: ???
==80557==    by 0x1BFF: ???
==80557==    by 0x111E3: ???
==80557==    by 0x804D2BFFF: ???
==80557==    by 0x15EC4: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80557)
==80557==    at 0x403B20: read_all (cmd.c:108)
==80557==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80557==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Starting loop

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 2340020694142578537.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==80562==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==80562==    by 0x802D64F97: ???
==80562==    by 0x802CA9F2F: ???
==80562==    by 0x8020082EF: ???
==80562==    by 0x403AA5: read_all (cmd.c:98)
==80562==    by 0x8020082EF: ???
==80562==    by 0x1BFF: ???
==80562==    by 0x111D0: ???
==80562==    by 0x804D2BFFF: ???
==80562==    by 0x15E52: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 80562)
==80562==    at 0x403B20: read_all (cmd.c:108)
==80562==    by 0x4018FC: read_all_1 (binary_tests.c:140)
==80562==    by 0x4036B2: main (binary_tests.c:764)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

